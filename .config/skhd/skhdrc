# add an on_enter command to the default mode
# :: default : yabai border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : yabai border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

cmd - k [
    "firefox"       : skhd -k "f6" # firefox navbar 
]

cmd -b [
    "firefox"       : skhd -k "shift + ctrl - e"
]

cmd - h [
    "firefox" : skhd -k "cmd - 0x21"
]

cmd - l [
    "firefox" : skhd -k "cmd - 0x1E"
]

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "vivaldi"
# ]

# cmd - h [
#     "obsidian" : skhd -k "cmd - h"
#     "" : :
# ]
shift + cmd - h : : 

#------------------------------- Appliaction Manager --------------------------------

# open terminal, blazingly fast compared to iTerm/Hyper
cmd - return : /Applications/Kitty.app/Contents/MacOS/kitty --single-instance ~

# Kill terminal.
cmd + shift - q : /usr/bin/pkill -9 -afi kitty

# open messenger
cmd + shift - 0 : open -a 'Messenger'

# open reminders
cmd + shift - r : open -a 'Reminders' .

# open browser (don't really use this anymore)
cmd + shift - return : /Applications/Kitty.app/Contents/MacOS/kitty --single-instance /usr/local/bin/nvim
# cmd + shift - return : open -na 'Firefox'

# cmd + shift - return : open -na /Applications/qutebrowser.app
# cmd + shift - return : open -na /Applications/Vivaldi.app

# open macvim in cloud notes folder
# cmd + shift - m : /Applications/MacVim.app/Contents/MacOS/MacVim /Users/struppi/Library/Mobile\ Documents/com~apple~CloudDocs/struppi-city
# cmd + shift - m : /Applications/Kitty.app/Contents/MacOS/kitty --single-instance mvim -v /Users/struppi/Library/Mobile\ Documents/com~apple~CloudDocs/struppi-city
cmd + shift - m : /Applications/Kitty.app/Contents/MacOS/kitty --single-instance nvim /Users/struppi/Library/Mobile\ Documents/com~apple~CloudDocs/struppi-city

#------------------------------- Window Manager -----------------------------------

# minimize window
cmd - m : yabai -m window --minimize

# rotate tree
alt - r : yabai -m space --rotate 90
alt + shift - r : yabai -m space --rotate 270 

# mirror tree y-axis
alt - y : yabai -m space --mirror y-axis

# mirror tree x-axis
alt - x : yabai -m space --mirror x-axis

# toggle desktop offset -> fattten
alt - a : yabai -m space --toggle padding; yabai -m space --toggle gap

# toggle window parent zoom
# alt - d : yabai -m window --focus mouse && \
#           yabai -m window --toggle zoom-parent
alt - d : yabai -m window --toggle zoom-parent


# toggle window fullscreen zoom
alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window native fullscreen
shift + alt - f : yabai -m window --toggle native-fullscreen

#------------------------------- SPACE Manager -----------------------------------

# change space
alt - i : yabai -m space --focus next
alt - o : yabai -m space --focus prev
alt - 0x32 : yabai -m space --focus recent

# move window to space and follow focus
shift + alt - i : yabai -m window --space next;\
                      yabai -m space --focus next
shift + alt - o : yabai -m window --space prev;\
                     yabai -m space --focus prev

# balance size of windows
shift + alt - 0 : yabai -m space --balance

# increase gap in focused space
alt - g : yabai -m space --gap rel:10;\
          yabai -m space --padding rel:12:12:12:12

# decrease gap in focused space
shift + alt - g : yabai -m space --gap rel:-10;\
                  yabai -m space --padding rel:-12:-12:-12:-12
 
# destroy space
shift + alt - w : yabai -m space --destroy

# create a new space and follow focus
alt - n : yabai -m space --create && \
                  index="$(yabai -m query --displays --display | jq '.spaces[-1]')" && \
                  yabai -m space --focus "${index}"


# create a new space, move window and follow focus
shift + alt - n : yabai -m space --create && \
                  index="$(yabai -m query --displays --display | jq '.spaces[-1]')" && \
                  yabai -m window --space "${index}" && \
                  yabai -m space --focus "${index}"

# float/unfloat window and center on screen
alt - t : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

shift + alt - t : yabai -m window --toggle float;\
          yabai -m window --grid 20:20:1:1:18:18

# toggle window split type
alt - e : yabai -m window --toggle split

#------------------------------- Window Manip. -----------------------------------

# focus window
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east

# Swap window.
shift + alt - h : yabai -m window --swap west
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
shift + alt - l : yabai -m window --swap east

# Move window.
shift + cmd - h : yabai -m window --warp west
shift + cmd - j : yabai -m window --warp south
shift + cmd - k : yabai -m window --warp north
shift + cmd - l : yabai -m window --warp east

# send window to a space 
shift + alt - 1 : yabai -m window --space 1;\
                  yabai -m space --focus 1
shift + alt - 2 : yabai -m window --space 2;\
                  yabai -m space --focus 2
shift + alt - 3 : yabai -m window --space 3;\
                  yabai -m space --focus 3
shift + alt - 8 : yabai -m window --space 4;\
                  yabai -m space --focus 4
shift + alt - 9 : yabai -m window --space 5;\
                  yabai -m space --focus 5
shift + alt - 0 : yabai -m window --space 6;\
                  yabai -m space --focus 6

# focus space
alt - 1 : yabai -m space --focus 1
alt - 2 : yabai -m space --focus 2
alt - 3 : yabai -m space --focus 3
alt - 8 : yabai -m space --focus 4
alt - 9 : yabai -m space --focus 5
alt - 0 : yabai -m space --focus 6

#------------------------------- Floating Windows -----------------------------------

# make floating window fill screen
shift + alt - up : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
shift + alt - left : yabai -m window --grid 1:2:0:0:1:1

# make floating window fill right-half of screen
shift + alt - right : yabai -m window --grid 1:2:1:0:1:1

# increase window size
ctrl + alt - h : yabai -m window --resize left:-40:0
ctrl + alt - j : yabai -m window --resize bottom:0:40
ctrl + alt - k : yabai -m window --resize top:0:-40
ctrl + alt - l : yabai -m window --resize right:40:0

# decrease window size
ctrl + alt + cmd - h : yabai -m window --resize left:40:0
ctrl + alt + cmd - j : yabai -m window --resize bottom:0:-40
ctrl + alt + cmd - k : yabai -m window --resize top:0:40
ctrl + alt + cmd - l : yabai -m window --resize right:-40:0

# toggle sticky (show on all spaces) & topmost (keep above other windows)
alt - s : yabai -m window --toggle sticky

# toggle topmost (keep above other windows)
# alt - o : yabai -m window --toggle topmost

# toggle sticky(+float), topmost, border and picture-in-picture
alt - p : yabai -m window --toggle sticky;\
          yabai -m window --toggle topmost;\
          # yabai -m window --toggle border;\
          yabai -m window --toggle pip

# change layout of desktop
ctrl + alt - a : yabai -m space --layout bsp
ctrl + alt - d : yabai -m space --layout float

# toggle tiled mode (used to force Applications (Books, etc) into tiled mode)
alt + cmd + ctrl - f : yabai -m window --toggle float 

# cycle through all windows sorted by: coordinates -> space index -> display index
# lalt - tab : yabai -m window --focus "$(yabai -m query --windows | jq -re "sort_by(.display, .space, .frame.x, .frame.y, .id) | map(select(.\"is-visible\" == true and .role != \"AXUnknown\")) | reverse | nth(index(map(select(.\"has-focus\" == true))) - 1).id")"
lalt - tab : [ $(yabai -m query --windows --space | jq -re "map(select(.\"has-focus\" == true)) | length != 0") = true ] && yabai -m window --focus "$(yabai -m query --windows --space | jq -re "[sort_by(.id, .frame) | reverse | .[] | select(.role == \"AXWindow\" and .subrole == \"AXStandardWindow\") | .id] | nth(index($(yabai -m query --windows --window | jq -re ".id")) - 1)")" ||  yabai -m window --focus "$(yabai -m query --spaces --space | jq -re ".windows[0]?")" &> /dev/null
lalt + shift - tab : yabai -m window --focus "$(yabai -m query --windows | jq -re "sort_by(.display, .space, .frame.x, .frame.y, .id) | reverse | map(select(.\"is-visible\" == true and .role != \"AXUnknown\")) | reverse | nth(index(map(select(.\"has-focus\" == true))) - 1).id")"

# cycle through all visible windows sorted by: coordinates -> display index
# yabai -m window --focus "$(yabai -m query --windows | jq -re "sort_by(.display, .frame.x, .frame.y, .id) | map(select(.\"is-visible\" == true and .role != \"AXUnknown\")) | reverse | nth(index(map(select(.\"has-focus\" == true))) - 1).id")"

# Arrow Keys
fn - h : skhd -k "left"
fn - j : skhd -k "down"
fn - k : skhd -k "up"
fn - l : skhd -k "right"

# restart yabai
ctrl + alt + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"

# dropdown terminal (aka "quade mode")
# see additional config in ~/.config/yabai/yabairc
ctrl - escape : WINDOW_TITLE="ddterm";                                                                                      \
                WINDOW_ID=$(yabai -m query --windows | jq -e ".[] | select(.title==\"$WINDOW_TITLE\") | .id");              \
                if [ -z "$WINDOW_ID" ]; then                                                                                \
                  pgrep -x kitty > /dev/null &&                                                                             \
                  kitty @ new-window --title "$WINDOW_TITLE" ||                                                             \
                  open -na /Applications/Kitty.app --args --title "$WINDOW_TITLE";                                          \
                else                                                                                                        \
                  DISTANCE=$(yabai -m query --windows --window "$WINDOW_ID" | jq -e '[ .frame.y, .frame.h ] | add');        \
                  if [ "$DISTANCE" -gt 0 ]; then                                                                            \
                    yabai -m window "$WINDOW_ID" --move abs:0:-"$DISTANCE" --layer below --focus mouse;                     \
                  else                                                                                                      \
                    yabai -m window "$WINDOW_ID" --space mouse --move abs:0:0 --grid "5:5:1:1:1:1" --layer above --focus;  \
                  fi;                                                                                                       \
                fi;                                                                                                         \

# debug
alt + ctrl - i : json_text=$(yabai -m query --windows --window mouse | jq -r tostring | tr -d '{}"' | tr ',' '\n') ; \
                 appName=$(echo "$json_text" | sed -n 's/^app:\(.*\)/\1/p') ; \
                 result=$(osascript -e "display dialog \"$json_text\" buttons {\"Close\", \"manageOff\"} default button \"Close\"") ; \
                 echo "$result" | grep -q "manageOff" && \
                 perl -i -pe "s/manageOffApp\=\'\^\(/manageOffApp\=\'\^\($appName\|/g" ~/.config/yabai/yabairc && \
                 yabai --restart-service
